#!/bin/sh

# Some code/ideas taken from bb repo, primarily in terms of the netrc. It's
# possible that these programs could be integrated at some point, or they could
# just share the netrc.

# Curl requests taken from Firefox's Firebug

v=""

while [ -n "$1" ]
do
    case "$1" in
    "-v"|"--verbose")
        set -x
        v="-v"
        ;;
    esac

    shift
done

COOKIE_JAR="COOKIES"
LOG_FILE="LOG"
HTML_FILE="HTML"
CONFIRM_CRN=false

# I'm not sure why but for both curl and Ruby's Mechanize, but not for
# browsers, the SSL certificate for the registration pages is found invalid
# and can't be validated properly. It works with the check disabled but is
# less secure.

curl_args="-s $v -k -c $COOKIE_JAR -b $COOKIE_JAR"

> $LOG_FILE
> $COOKIE_JAR
> $HTML_FILE

log()
{
    msg="$(date +%s) [$(date)]"

    [ $# = 0 ] || msg="$msg $*"

    echo $msg >> $LOG_FILE
}

echo "WARNING: the file '$HTML_FILE' will contain your password in plain text."
echo "Do not share this file with anyone else."

log 'URReg v1.0'

log "Using $COOKIE_JAR as the cookie jar"

log "\$curl_args = \"$curl_args\""

log 'BEGIN'

logged_in=false

id=
password=

crns=

is_insecure()
{
    # Check if a file is accessible to other users
    if [ -n "$(find $1 -perm /066)" ]
    then
        log "is_insecure(): $1 => TRUE"
        return 0
    fi

    log "is_insecure(): $1 => FALSE"

    return 1
}

# TODO - Test this
make_secure()
{
    log "make_secure(): securing $1"
    chmod -066 "$1"
}

make_secure "$HTML_FILE"

# get saved login info from ~/.netrc
parse_netrc()
{
    log 'parse_netrc(): BEGIN'

	netrc="$HOME/.netrc"
	if [ ! -f "$netrc" ]
    then
        log "parse_netrc(): netrc ($netrc) does not exist."

        log 'parse_netrc(): END'

        return 1
    fi

	if is_insecure $netrc
	then
		echo 'Warning: .netrc has insecure permissions.' >&2

        log 'parse_netrc(): netrc is insecure'

        log 'parse_netrc(): asking to fix netrc security'
        read -p 'Do you want to fix it? [Y/n] ' fix
        log "parse_netrc(): asked to fix netrc; fix = $fix"

        case $fix in
        [yY][eE][sS]|[yY])
            log 'parse_netrc(): securing netrc'
            make_secure $netrc
            ;;

        *)
            log 'parse_netrc(): not securing netrc'
            ;;
        esac
	fi

    cred="$(sed -n '/machine my\.rochester\.edu/,/machine /p' $netrc)"
    id="$(echo $cred | sed -n 's/.*login \([^ ]*\).*/\1/p')"
    password="$(echo $cred | sed -n 's/.*password \([^ ]*\).*/\1/p')"

    log "parse_netrc(): \$cred = $cred; \$id = $id"

    log "parse_netrc(): END"
}

create_url()
{
    url="https://webreg.its.rochester.edu/prod/tapp?Navigate=$2&OnError=error.jsp&TS=$1"

    log "create_url(): created '$url'"

    echo "$url"
}

has_valid_session()
{
    $logged_in || return 0

    # TODO - implement this
    if true
	then
        logged_in=true
		return 0
    fi

    logged_in=false
    password=

    return 1
}

send_request()
{
    log 'send_request(): BEGIN'

    result="$(curl $curl_args $*)"

    err=$?

    if [ $err != 0 ]
    then
        echo 'Error: request failed.' >&2

        log "send_request(): curl failed; error code $err"

        log 'send_request(): END'

        return 1
    fi

    echo "----- CURL REQUEST -----" >> $HTML_FILE

    echo "curl $curl_args $*" >> $HTML_FILE

    echo "----- HTML -----" >> $HTML_FILE

    echo "$result" >> $HTML_FILE

    echo "$result"

    log 'send_request(): END'

    return 0
}

Login()
{
    log 'Login(): BEGIN'

    ts=1415370325856

    log "Login(): \$ts = $ts"

    parse_netrc

	while [ -z "$id" ]
    do
        log "Login(): \$id = $id; reading id"
		read -p 'Net ID: ' id
        log "Login(): read id; \$id = $id"
    done

	while [ -z "$password" ]
    do
        log 'Login(): reading password'
		stty -echo
		read -p 'Password: ' password; echo
		stty echo
        log 'Login(): read password'
    done

    echo 'Logging in...'

    log 'Login(): Sending login request'

    # 'https://webreg.its.rochester.edu/prod/tapp' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q=0.5' -H 'Connection: keep-alive' -H 'DNT: 1' -H 'Host: webreg.its.rochester.edu' -H 'Referer: https://webreg.its.rochester.edu/prod/web/LoginMain.jsp' -H 'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0' -H 'Content-Type: application/x-www-form-urlencoded'

    login_html="$(send_request 'https://webreg.its.rochester.edu/prod/tapp' --data "Navigate=redirect.jsp&OnError=LoginError.jsp&START_APP=true&JSP_TYPE=web&TS=$ts&TRX_ID=ValidateStudent&CHECK_REG_RESTR=true&LDAP_AUTH=true&LOAD_DEF_LOG_TERM=true&LOAD_COUNTRY_CODES=true&LOAD_STATE_CODES=true&LOAD_COLLEGE_CODES=true&LOAD_HOLD_CODES=true&LOAD_RESTRICTION_CODES=true&LOAD_RELATIONSHIP_CODES=true&STUDENT_ID=$id&STUDENT_PIN=$password")"

    err=$?

    if [ ! $err ]
    then
        echo 'Error: unable to log in.' >&2

        log 'Login(): Error: unable to log in'

        logged_in=false

        log 'Login(): END'

        return 1
    fi

    log 'Login(): Sending enter request'

    enter_url="$(create_url $ts 'classindex.jsp&WAITPAGE=Loading.htm&LOAD_TERMS=true&TRX_ID=GetCollegeRegTerms&LOAD_DEF_REG_TERM=true&LOAD_SCHEDULE=true')"

    # -H 'Host: webreg.its.rochester.edu' -H 'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Cache-Control: max-age=0

    enter_html="$(send_request "$enter_url")"
    err=$?

    send_request "https://webreg.its.rochester.edu/prod/tapp?Navigate=RchHoldsIndex.jsp&OnError=error.jsp"

    if [ ! $err ]
    then
        echo 'Error: request failed.' >&2

        log 'Login(): Error: enter request failed'

        logged_in=false

        log 'Login(): END'

        return 1
    fi

    log 'Login(): should be successfully logged in'

    logged_in=true

    log 'Login(): END'

    return 0
}

is_valid_crn()
{
    if [ ${#1} = 5 ] && echo "$1" | grep -q '[0-9]\{5\}' -
    then
        log "is_valid_crn(): $1 => TRUE"
        return 0
    fi

    log "is_valid_crn(): $1 => FALSE"

    return 1
}

read_crn()
{
    log 'read_crn(): BEGIN'

    while true
    do
        while true
        do
            log "read_crn(): \$crn = $crn; reading crn"
            read -p 'CRN: ' crn
            log "read_crn(): read crn; \$crn = $crn"

            if [ -z $crn ]
            then
                log 'read_crn(): $crn is empty; returning'

                log 'read_crn(): END'

                return 1
            fi

            if is_valid_crn $crn
            then
                log "read_crn(): using \$crn = $crn"
                break
            fi

            echo 'Error: invalid CRN.' >&2

            log 'read_crn(): invalid crn entered; looping'
        done

        if ! $CONFIRM_CRN
        then
            log 'read_crn(): skipping crn confirmation'

            return 0
        fi

        log "read_crn(): \$crn_confirm = $crn_confirm; reading crn"\
            "confirmation"

        read -p 'CRN confirmation: ' crn_confirm
        log "read_crn(): read crn confirmation; \$crn_confirm = $crn_confirm"

        if [ "$crn" = "$crn_confirm" ]
        then
            log "read_crn(): CRNs $crn and $crn_confirm match"

            log 'read_crn(): END'

            return 0
        fi

        echo 'Error: CRNs do not match.' >&2

        log "read_crn(): CRNs $crn and $crn_confirm do not match; looping"
    done

    log 'read_crn(): Error: reached unreachable statement.'
}

read_crns()
{
    log 'read_crns(): BEGIN'

    while read_crn
    do
        crns="$crns $crn"

        log "read_crns(): crn read; \$crn = $crn; \$crns = $crns"
    done

    if [ -z $crns ]
    then
        echo 'Warning: you have not entered any classes to register for.' >&2

        log 'read_crns(): \$crns is empty; not registering for any classes'

        log 'read_crns(): END'

        return 1
    fi

    log 'read_crns(): END'

    return 0
}

add_course()
{
    log 'add_course(): BEGIN'

    crn="$1"
    ts=1415370325856

    log "add_course(): using \$crn = $crn, \$ts = $ts"

    # 'A' is for auditing; 'N' is for normal grading
    if [ "$3" = 'A' ]
    then
        gt="A"

        log "add_course(): grade type given; \$gt = $gt"
    else
        gt="N"

        log "add_course(): grade type not given; \$gt = $gt"
    fi

    echo "Adding CRN $crn to cart..."

    add_url="$(create_url $ts "regdisplay1.jsp&SHOP_CART=true&LOAD_SCHEDULE=false&ADD_CALL_NUM=$crn&GRADE_TYPE=$gt")"

    log "add_course(): adding course to cart using \$add_url = $add_url"

    # -H 'Host: webreg.its.rochester.edu' -H 'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate' -H 'DNT: 1' -H 'Connection: keep-alive'

    add_html="$(send_request "$add_url")"

    err=$?

    if [ $err != 0 ]
    then
        log 'Error: unable to add course to cart.'

        log 'add_course(): END'

        echo 'Error: unable to add course to cart.' >&2

        return 1
    fi

    log 'add_course(): added course to cart'

    submit_url="$(create_url $ts "CartResults.jsp&SUBMIT_CART=true&WAITPAGE=PleaseWait.htm")"

    log "add_course(): submitting cart using \$submit_url = $submit_url"

    # -H 'Host: webreg.its.rochester.edu' -H 'User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Cache-Control: max-age=0'

    submit_html="$(send_request "$submit_url")"

    err=$?

    if [ $err != 0 ]
    then
        log 'add_course(): END'

        return 1
    fi

    log 'add_course(): submitted cart'

    log 'add_course(): END'

    return 0
}

if ! read_crns
then
    log 'No CRNs entered'

    log 'END'

    exit 0
fi

if ! Login $(date +%s)
then
    log 'Login failed'

    log 'END'

    exit 1
fi

for crn in $crns
do
    add_course $crn $(date +%s)
done

log 'END'
